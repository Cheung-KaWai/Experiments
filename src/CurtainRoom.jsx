/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 .\curtainRoom.glb -T -p 6
*/

import React, { useLayoutEffect, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { MeshStandardMaterial } from "three";

export function CurtainRoom(props) {
  const { nodes, materials } = useGLTF("Experiment3/curtainRoom.glb");
  const room = useRef();
  const floor = useRef();
  const ceiling = useRef();

  const bakes = useTexture([
    "/Experiment3/bakes/Floor_Bake1_CyclesBake_DIFFUSE.jpg",
    "/Experiment3/bakes/Room_Bake1_CyclesBake_DIFFUSE.jpg",
    "/Experiment3/bakes/Ceiling_Bake1_CyclesBake_DIFFUSE.jpg",
  ]);
  bakes.map((bake) => (bake.flipY = false));

  const [floorbake, roombake, ceilingbake] = bakes;
  console.log(bakes);

  useLayoutEffect(() => {
    room.current.geometry.attributes.uv2 = room.current.geometry.attributes.uv;
    floor.current.geometry.attributes.uv2 = floor.current.geometry.attributes.uv;
    ceiling.current.geometry.attributes.uv2 = ceiling.current.geometry.attributes.uv;
  }, []);

  const floorMat = new MeshStandardMaterial({
    lightMap: floorbake,
    envMapIntensity: 0,
    lightMapIntensity: 0.5,
  });
  const roomMat = new MeshStandardMaterial({
    lightMap: roombake,
    envMapIntensity: 0.5,
  });
  const ceilingMat = new MeshStandardMaterial({
    lightMap: ceilingbake,
    envMapIntensity: 0.5,
  });

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Room.geometry} material={roomMat} ref={room} />
      <mesh geometry={nodes.Floor.geometry} material={floorMat} ref={floor} />
      <mesh geometry={nodes.Ceiling.geometry} material={ceilingMat} ref={ceiling} />
    </group>
  );
}
