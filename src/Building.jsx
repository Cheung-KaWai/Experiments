/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 ./building.glb -T -p 6
*/

import React, { useEffect, useRef } from "react";
import { Html, useGLTF } from "@react-three/drei";
import { DoubleSide, LineBasicMaterial, WireframeGeometry } from "three";
import { useControls } from "leva";
import { gsap } from "gsap";

export function Building(props) {
  const { nodes, materials } = useGLTF("/building-transformed.glb");

  const { progress } = useControls({
    progress: {
      value: -3.0,
      step: 0.1,
      min: 0.0,
      max: 22.0,
    },
  });

  let preWave = 0.1;
  let postWave = 6.1;
  let uniforms = {
    hWave: { value: progress },
  };

  const lineMaterial = new LineBasicMaterial({
    color: "#00fff2",
    depthTest: false,
    transparent: true,
    opacity: 0.1,
    onBeforeCompile: (shader) => {
      shader.uniforms.hWave = uniforms.hWave;
      shader.vertexShader = `
        varying float vPos;
        ${shader.vertexShader}
      `.replace(
        `#include <begin_vertex>`,
        `#include <begin_vertex>
          vPos = (modelMatrix * vec4(transformed, 1.0)).y;
        `
      );
      shader.fragmentShader = `
        #define ss(a,b,c) smoothstep(a,b,c)
        uniform float hWave;
        varying float vPos;
        ${shader.fragmentShader}
      `.replace(
        `vec4 diffuseColor = vec4( diffuse, opacity );`,
        `
        float f = ss(hWave - ${postWave}, hWave, vPos) - ss(hWave, hWave + ${preWave}, vPos);
        f = clamp(f, 0., 1.);
        f *= (1. - opacity);
        vec4 diffuseColor = vec4( diffuse, opacity + f );`
      );
    },
  });

  const gLines1 = new WireframeGeometry(nodes.Modern_Apartments_Mid_Roof001.geometry);

  function starAnimation() {
    gsap.to(uniforms.hWave, {
      value: 22,
      duration: 3,
      repeat: -1,
      onComplete: () => {
        // Reset the property to its initial value
        gsap.set(uniforms.hWave, { value: -3.0 });
      },
    });
  }

  useEffect(() => {
    starAnimation();
  }, [progress]);

  return (
    <group {...props} dispose={null} position={[0, 8.125126, 0]} rotation={[Math.PI / 2, 0, -Math.PI / 2]}>
      <mesh geometry={nodes.Modern_Apartments_Mid_Roof001.geometry}>
        <meshStandardMaterial color={"#339da5"} />
      </mesh>
      <lineSegments geometry={gLines1} material={lineMaterial} />
    </group>
  );
}

useGLTF.preload("/building-transformed.glb");
